#!/bin/bash
echo "$# non-option arguments"
confirm () {
    while true; do
        echo "$1"

        read -r -p "[Y/n] " input

        case $input in
            [yY][eE][sS]|[yY])
                echo "Yes"
                echo ""
                return 0
                ;;
            [nN][oO]|[nN])
                echo "No"
                return 1
                ;;
            *)
                echo "Invalid input..."
                ;;
        esac
    done
}

fresh_env () {

  # Prompt for customization
  echo "Do you want to customize your environment variables?"
  echo ""
  echo "If developing in a local environment (i.e. localhost),"
  echo "then configuration is optional"
  if confirm
  then
    while true; do

      # Environment
      read -p "What kind of environment are you in? (Default: local | Example: testing, production, local) " app_env
      app_env=${app_env:-local}
        case "$app_env" in
          "local")
            app_debug="true"
            ;;
          "production")
            app_debug="false"
              read -p "What is your email for Certbot SSL certificate installation? " certbot_email
              cerbot_email=${certbot_email:-"hello@example.com"}
              echo certbot_email
              echo ""
            ;;
          "testing")
            app_debug="true"
            ;;
          *)
            app_debug="true"
            ;;
        esac
      echo "$app_env"
      echo ""

      # App Name
      read -p "What's your app's name? (Default: Laravel) " app_name
      app_name=${app_name:-Laravel}
      echo "$app_name"
      echo ""

      # App URL
      read -p "What's your app's URL? (Default: http://localhost) " app_url
      app_url=${app_url:-"http://localhost"}
      echo "$app_url"
      echo ""

      # App FQDN
      read -p "What's your app's Fully Qualified Domain Name? (Example: www.google.com | Default: localhost) " app_fqdn
      app_fqdn=${app_fqdn:-localhost}
      echo "$app_fqdn"
      echo ""

      # DB Database
      read -p "Define your app's database's name (Default: homestead) " db_database
      db_database=${db_database:-homestead}
      echo "$db_database"
      echo ""

      # DB Username
      read -p "Define your database's username (Default: homestead) " db_username
      db_username=${db_username:-homestead}
      echo "$db_username"
      echo ""

      # DB Password
      read -p "Define your database's password (Default: secret) " db_password
      db_password=${db_password:-secret}
      echo "$db_password"
      echo ""

      # DB Root Password
      read -p "Define your database's root password (Default: secret) " db_root_password
      db_root_passowrd=${db_root_passowrd:-secret}
      echo "$db_root_password"
      echo ""

      echo "APP_NAME=$app_name
APP_ENV=$app_env
APP_KEY=
APP_DEBUG=$app_debug
APP_URL=$app_url
APP_FQDN=$app_fqdn

CERTBOT_EMAIL=$certbot_email

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=$db_database
DB_USERNAME=$db_username
DB_PASSWORD=$db_password
DB_ROOT_PASSWORD=$db_root_password

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
" | tee .env
            break
    done
    else
    cp .env.example .env
  fi

}

 # If .env doesn't exist...
if ! test -f ".env";
then
    # If the user would like to make a new one
    if confirm "Could not locate .env. Would you like to create a fresh one?"
    then
      fresh_env
    fi
fi

while getopts 'acdhinp' OPTION; do
  case "$OPTION" in
    a)
      echo "Detected artisan flag. Will run artisan commands"
      sleep 1
      artisan=1
      ;;
    c)
      echo "Detected composer flag. Will run composer update"
      sleep 1
      composer=1
      ;;
    d)
      echo "Detected docker flag. Will pull, build, and restart containers"
      sleep 1
      docker=1
      ;;
    h)
      echo ""
      echo "Detected help flag"
      echo ""
      echo "    Various flags include:"
      echo "-a | Artisan flag.       | Run artisan commands"
      echo "-c | Composer flag.      | Install composer dependencies"
      echo "-d | Docker flag.        | Pull, build, and run containers"
      echo "-h | Help flag.          | Display this message"
      echo "-i | Initialization flag | Run the initialization script"
      echo "-n | NPM flag.           | Install npm dependencies and execute npm run dev"
      ;;
    i)
      echo "Detected initialization flag. Will create default environment variables"
      sleep 1
      init=1
      ;;
    n)
      echo "Detected NPM flag. Will run npm install and npm run dev"
      sleep 1
      npm=1
      ;;
    p)
      echo "Detected Production flag. Will setup production environment"
      sleep 1
      prod=1
      ;;
    ?)
      echo "script usage: $(basename \$0) [-l] [-h] [-a somevalue]" >&2
      exit 1
      ;;
  esac
done

if [ $OPTIND -eq 1 ];
then
  echo "No options were passed. Running fresh initialization"
  sleep 1
  COMPOSE_DOCKER_CLI_BUILD=0 docker-compose build --parallel --pull --force-rm --no-cache \
  && docker-compose up -d --remove-orphans \
  && docker-compose run --rm composer update \
  && docker-compose run --rm npm cache clear --force \
  && docker-compose run --rm npm install \
  && docker-compose run --rm npm run dev \
  && docker-compose run --rm artisan key:generate \
  && docker-compose run --rm artisan optimize \
  && docker-compose run --rm artisan storage:link \
  && docker-compose run --rm artisan migrate:fresh --seed

  sudo chgrp -R www-data ./storage ./bootstrap/cache
  sudo chmod -R ug+rwx ./storage ./bootstrap/cache
fi

# Init flag
if [[ init -eq 1 ]]
then
  echo "init"
fi

# Docker commands
if [[ docker -eq 1 ]]
then
  docker-compose pull \
  && COMPOSE_DOCKER_CLI_BUILD=0 docker-compose build --parallel \
  && docker-compose up -d --remove-orphans
fi

# Composer commands
if [[ composer -eq 1 ]]
then
  docker-compose run --rm composer update
fi

# NPM commands
if [[ npm -eq 1 ]]
then
    docker-compose run --rm npm cache clear --force \
    && docker-compose run --rm npm install \
    && docker-compose run --rm npm run dev
fi

# Artisan commands
if [[ artisan -eq 1 ]]
then
    docker-compose run --rm artisan key:generate \
    && docker-compose run --rm artisan optimize \
    && docker-compose run --rm artisan storage:link \
    && docker-compose run --rm artisan migrate:fresh --seed \
    && sudo chgrp -R www-data ./storage ./bootstrap/cache \
    && sudo chmod -R ug+rwx ./storage ./bootstrap/cache
fi
